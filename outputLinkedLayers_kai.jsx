/** *  * http://www.ssnsk.com/hoka/index.htmlで紹介されているリンクされたレイヤーを一枚ずつファイルに書き出すスクリプトをスマートオブジェクトやフォルダに対して実行した際に書き出しできなかった問題をとりあえず解決したもの。 *気がむいたら改造予定。 *  * 選択しているレイヤとそのレイヤにリンクされているレイヤを、一枚ずつ別のファイルに書き出す. * それ以外のレイヤについては、そのままの状態(表示されているレイヤだけ)で書き出される. *  *  このスクリプト(outputLinkedLayers.jsx) によって生じた損害に関してなんら責任を負いません. *   *  * @date    2017.01.24 * @author  ss * @version 0.4 *///#target "photoshop"/* main エントリー */// L, T, R, Bdlg = new Window("dialog","Export selected layer and linked layers.",                 [200,100,530,600], {resizeable: true});dlg.sText = dlg.add("statictext",[20,32,100,30+30], "FileType :")rbW = 65rbH = 20dlg.rBtnJpg = dlg.add("radiobutton",[110, 30, 110+rbW, 30+rbH], "JPEG")dlg.rBtnGif = dlg.add("radiobutton",[110+rbW, 30, 110+rbW*2, 30+rbH], "GIF")dlg.rBtnPng = dlg.add("radiobutton",[110+rbW*2, 30, 110+rbW*3, 30+rbH], "PNG")dlg.rBtnJpg.value = truedlg.sep1 = dlg.add('panel', [15, 70, 300, 72]);dlg.sText2 = dlg.add("statictext",[20,100,100, 100+20], "JPEG Option :")dlg.sText3 = dlg.add("statictext",[40,125,120, 120+40], "Quarity (0-12)")dlg.eText  = dlg.add("edittext", [130, 122, 200, 130+18], "9");dlg.sep2 = dlg.add('panel', [15, 170, 300, 172]);dlg.sText4 = dlg.add("statictext",[20,185,100, 185+20], "GIF Option :")dlg.sText5 = dlg.add("statictext",[40, 210,120, 205+20], "Transparency")dlg.cBox1 = dlg.add("checkbox",[140, 200, 220, 200+30])dlg.cBox1.value = truedlg.sep3 = dlg.add('panel', [15, 230, 300, 232]);//ダイアログオブジェクト. bounds = "left:左座標, top:上座標, right:右座標, bottom:下座標"dlg.sText6 = dlg.add("statictext",[20,240,120, 240+18], "連番名接頭辞：")dlg.sText7 = dlg.add("statictext",[20,270,120, 270+18], "連番名接尾辞：")dlg.eText2 = dlg.add("edittext", [130, 240, 220, 240+18], "")dlg.eText3 = dlg.add("edittext", [130, 270, 220, 270+18], "")dlg.sep3 = dlg.add('panel', [15, 300, 300, 300+2]);dlg.okBtn = dlg.add("button",[130,315,225,315+25], "OK", { name:"ok"});if (dlg.show() == 1) {	var opt    var quarity = parseInt(dlg.eText.text)    if (quarity >= 0 && quarity <= 12) {		if (dlg.rBtnJpg.value == true) {			opt = new JPEGSaveOptions()			opt.colors = 255			opt.formatOptions = FormatOptions.STANDARDBASELINE			opt.matte = MatteType.NONE			opt.quality = quarity			opt.scans = 3		} else if (dlg.rBtnGif.value == true) {			opt = new GIFSaveOptions()			opt.color = 255			opt.matte = MatteType.NONE			opt.transparency = dlg.cBox1.value		} else {			opt = new PNGSaveOptions()		}		outputLinkedLayers(activeDocument, opt)	} else {		 alert("Invalid quarity  (0-12)") 	}}/* ---------------------------------------------------------------------- *//** * 選択しているレイヤとそのレイヤにリンクされているレイヤを、一枚ずつ別のファイルに書き出す. *  * @param {Object} doc  書き出しを行うドキュメント * @param {Object} opt  ...SaveOptions */function outputLinkedLayers(doc, opt) {	var imageWriter = createSaveAsWriter(doc, opt)	var targetLayers = getTargetLayers(doc)		// ターゲットレイヤを全て非表示にする	// (ターゲット以外のレイヤは、実行時の状態のまま)	for (i = 0; i < targetLayers.length; i++) {    	targetLayers[i].layer.visible = false	}		// ターゲットレイヤを一枚ずつ書き出す	for (var i = 0; i < targetLayers.length; i++) {    	targetLayers[i].layer.visible = true         //alert(dlg.eText2.text)         imageWriter(dlg.eText2.text+targetLayers[i].layer.name+dlg.eText3.text)       	targetLayers[i].layer.visible = false	}		// ターゲットレイヤの表示状態を元に戻す	for (i = 0; i < targetLayers.length; i++) {    	targetLayers[i].layer.visible = targetLayers[i].visible	}}/* -------------------- *//* * "別名で保存" で書き出すためのオブジェクトを作成. *     * @param {Object} doc      書き出しを行うドキュメント * @param {Object} opt      SaveOptions のオブジェクトを渡す */function createSaveAsWriter(doc, opt) {	var targetDirectoryPath = getTargetDirectoryPath(doc)		return function(filename){		filename = targetDirectoryPath + "/" + filename		doc.saveAs(new File( filename ), opt, true, Extension.LOWERCASE)	}}/* -------------------- *//* * doc と同じ場所に、doc と同名のディレクトリ(拡張子はなし)を、用意する. * @param {Object} doc  書き出しを行うドキュメント */function getTargetDirectoryPath(doc) {	var docName = doc.fullName.toString()	var dirName = docName.replace(/\.psd$/, "")	var dir = new Folder(dirName)		if (!dir.exists) {		dir.create()	}		return dirName.replace(/\/$/, "")}/* Layers */function isNormalLayer(layer) {	if (layer.typename == "ArtLayer" && layer.kind === LayerKind.NORMAL) {        return true    }	return false}// 戻り値は、 以下のようなオブジェクトのリスト//    { layer: ターゲットレイヤ, visible: レイヤの表示状態 }function getTargetLayers(doc){	/*var targetLayers = []	var currentLayer = doc.activeLayer	var linkedLayers = currentLayer.linkedLayers // linkedLayers includes 'LayerSet'.			if (isNormalLayer(currentLayer)) {		targetLayers.push( {layer: currentLayer, visible: currentLayer.visible} )	}		for (var i = 0; i < linkedLayers.length; i++) {		var linkedLayer = linkedLayers[i]		if (isNormalLayer(linkedLayer)) {			targetLayers.push({ layer: linkedLayer,	visible: linkedLayer.visible})		}	}*/     var targetLayers = []	var currentLayer = doc.activeLayer	var linkedLayers = currentLayer.linkedLayers // linkedLayers includes 'LayerSet'.			if (currentLayer) {		targetLayers.push( {layer: currentLayer, visible: currentLayer.visible} )	}		for (var i = 0; i < linkedLayers.length; i++) {		var linkedLayer = linkedLayers[i]		if (linkedLayer) {			targetLayers.push({ layer: linkedLayer,	visible: linkedLayer.visible})		}	}			return targetLayers}